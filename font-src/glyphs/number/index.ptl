$$include '../../meta/macros.ptl'

import [mix linreg clamp fallback] from '../../support/utils'
import [DesignParameters] from '../../meta/aesthetics'
import [AnyCv getGrMesh] from "../../support/gr"

glyph-module

glyph-block Digits-Shared : begin
	glyph-block-export OnumHeight
	define OnumHeight : XH * para.onumZeroHeightRatio

	glyph-block-export ShiftDown
	define [ShiftDown] : glyph-proc
		include : Upright
		include : Translate 0 (OnumHeight - CAP)
		include : Italify

	glyph-block-export OnumMarks
	define OnumMarks : object
		e : MarkSet.OfZone {.top OnumHeight .bot 0}
		p : MarkSet.OfZone {.top OnumHeight .bot (OnumHeight - CAP)}

	glyph-block-export CodeLnum CodeOnum
	define [CodeLnum u] : if (para.variantSelector.__defaultDigitForm == 'oldStyle') null u
	define [CodeOnum u] : if (para.variantSelector.__defaultDigitForm == 'oldStyle') u null

glyph-block Digits-Zero : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : OnumHeight OnumMarks CodeLnum CodeOnum

	define [ZeroSlashShape top] : begin
		local fine : 0.5 * OverlayStroke
		return : intersection
			OShapeOutline.NoOvershoot top 0 SB RightSB
			dispiro
				flat 0 (top * (1 - 0.77)) [widths fine fine]
				curl Width (top * 0.77)

	define [ZeroReverseSlashShape top] : begin
		local fine : 0.5 * OverlayStroke
		return : intersection
			OShapeOutline.NoOvershoot top 0 SB RightSB
			dispiro
				flat 0 (top * 0.77) [widths fine fine]
				curl Width (top * (1 - 0.77))

	define [ZeroDotShape top] : begin
		local halfDotWidth : Math.min DotRadius ((RightSB - SB - HVContrast * Stroke * 2) / 4)
		return : OShapeOutline.NoOvershoot
			top / 2 + DotRadius
			top / 2 - DotRadius
			Middle + halfDotWidth
			Middle - halfDotWidth
			Stroke * halfDotWidth * 2 / Width
			SmoothAOf halfDotWidth (halfDotWidth * 2)
			SmoothBOf halfDotWidth (halfDotWidth * 2)

	define [ZeroLongDotShape top] : begin
		local circleInnerWidth : RightSB - SB - HVContrast * Stroke * 2
		local halfDotWidth : Math.min HalfStroke (circleInnerWidth / 4)
		local halfDotHeight : Math.max DotRadius : Math.min ((top - Stroke * 2) / 4) ((top - Stroke * 2 - (circleInnerWidth - halfDotWidth * 2)) / 2)
		return : OShapeOutline.NoOvershoot
			top / 2 + halfDotHeight
			top / 2 - halfDotHeight
			Middle + halfDotWidth
			Middle - halfDotWidth
			Stroke * halfDotWidth * 2 / Width
			SmoothAOf halfDotWidth (halfDotWidth * 2)
			SmoothBOf halfDotWidth (halfDotWidth * 2)

	create-glyph 'zero.lnum.unslashed' : glyph-proc
		include : MarkSet.capital
		include : OShape CAP 0 SB RightSB

	create-glyph 'zero.lnum.slashed' : glyph-proc
		include : MarkSet.capital
		include : refer-glyph "zero.lnum.unslashed"
		include : ZeroSlashShape CAP

	create-glyph 'zero.lnum.reverse-slashed' : glyph-proc
		include : MarkSet.capital
		include : refer-glyph "zero.lnum.unslashed"
		include : ZeroReverseSlashShape CAP

	create-glyph 'zero.lnum.dotted' : glyph-proc
		include : MarkSet.capital
		include : refer-glyph "zero.lnum.unslashed"
		include : ZeroDotShape CAP

	create-glyph 'zero.lnum.longDotted' : glyph-proc
		include : MarkSet.capital
		include : refer-glyph "zero.lnum.unslashed"
		include : ZeroLongDotShape CAP

	create-glyph 'zero.onum.unslashed' : glyph-proc
		include : OnumMarks.e
		include : OShape OnumHeight 0 SB RightSB

	create-glyph 'zero.onum.slashed' : glyph-proc
		include : OnumMarks.e
		include : refer-glyph "zero.onum.unslashed"
		include : ZeroSlashShape OnumHeight

	create-glyph 'zero.onum.reverse-slashed' : glyph-proc
		include : OnumMarks.e
		include : refer-glyph "zero.onum.unslashed"
		include : ZeroReverseSlashShape OnumHeight

	create-glyph 'zero.onum.dotted' : glyph-proc
		include : OnumMarks.e
		include : refer-glyph "zero.onum.unslashed"
		include : ZeroDotShape OnumHeight

	create-glyph 'zero.onum.longDotted' : glyph-proc
		include : OnumMarks.e
		include : refer-glyph "zero.onum.unslashed"
		include : ZeroLongDotShape OnumHeight

	select-variant 'zero.lnum' [CodeLnum '0'] (follow -- 'zero')
	select-variant 'zero.onum' [CodeOnum '0'] (follow -- 'zero')

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/zero' 0x1D7D8 : glyph-proc
		include : MarkSet.capital
		include : OShape CAP 0 SB RightSB BBS
		include : intersection
			OShapeOutline.NoOvershoot CAP 0 SB RightSB BBS
			union
				VBarLeft  (SB + OX + BBD)      0 CAP BBS
				VBarRight (RightSB - OX - BBD) 0 CAP BBS
				intersection
					Rect CAP 0 (SB + BBD) (RightSB - BBD)
					dispiro
						flat 0 (CAP * (1 - 0.77)) [widths.center BBS]
						curl Width (CAP * 0.77)

glyph-block Digits-One : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : OnumHeight OnumMarks CodeLnum CodeOnum

	define [OneShape top balance pTopSerif] : glyph-proc
		define topSW : AdviceStroke 3.5
		include : VBar (Middle + balance) 0 top
		include : dispiro
			flat (Middle - HalfStroke * HVContrast + balance) top [widths topSW 0]
			curl (Middle - Stroke / 8 * HVContrast - HookX * 1.25 + balance) (top - Stroke / 8 - Hook * pTopSerif * (top / CAP))

	create-glyph 'one.lnum.nobase' : glyph-proc
		include : MarkSet.capital
		include : OneShape CAP OneBalance 0.75

	create-glyph 'one.lnum.base' : glyph-proc
		include : MarkSet.capital
		include : OneShape CAP (OneBalance / 4) 0.75
		include : CenterBottomSerif Middle 0 LongJut

	create-glyph 'one.lnum.nobaseLongTopSerif' : glyph-proc
		include : MarkSet.capital
		include : OneShape CAP OneBalance 1.875

	create-glyph 'one.lnum.baseLongTopSerif' : glyph-proc
		include : MarkSet.capital
		include : OneShape CAP (OneBalance / 4) 1.875
		include : CenterBottomSerif Middle 0 LongJut

	create-glyph 'one.lnum.line' : glyph-proc
		include : MarkSet.capital
		include : VBar Middle 0 CAP
		set currentGlyph.autoRefPriority (-2)

	create-glyph 'one.onum.nobase' : glyph-proc
		include : OnumMarks.e
		include : OneShape OnumHeight OneBalance 0.75

	create-glyph 'one.onum.base' : glyph-proc
		include : OnumMarks.e
		include : OneShape OnumHeight (OneBalance / 4) 0.75
		include : CenterBottomSerif Middle 0 LongJut

	create-glyph 'one.onum.nobaseLongTopSerif' : glyph-proc
		include : OnumMarks.e
		include : OneShape OnumHeight OneBalance 1.875

	create-glyph 'one.onum.baseLongTopSerif' : glyph-proc
		include : OnumMarks.e
		include : OneShape OnumHeight (OneBalance / 4) 1.875
		include : CenterBottomSerif Middle 0 LongJut

	create-glyph 'one.onum.line' : glyph-proc
		include : OnumMarks.e
		include : VBar Middle 0 OnumHeight
		set currentGlyph.autoRefPriority (-2)

	select-variant 'one.lnum' [CodeLnum '1'] (follow -- 'one')
	select-variant 'one.onum' [CodeOnum '1'] (follow -- 'one')

	glyph-block-import Letter-Blackboard : BBS BBD BBBarCenter
	create-glyph 'mathbb/one' 0x1D7D9 : glyph-proc
		define barCenter : Middle + OneBalance / 2
		define xSerifTerminal : barCenter - BBD / 8 * HVContrast - HookX * 1.25
		define ySerifTerminal : CAP - BBD / 8 - Hook * 0.75
		include : MarkSet.capital
		include : intersection
			BBBarCenter barCenter 0 CAP
			spiro-outline
				corner (barCenter + BBD / 2) CAP
				corner Width CAP
				corner Width 0
				corner 0     0
				corner xSerifTerminal ySerifTerminal
		include : dispiro
			widths.lhs BBS
			corner (barCenter + BBD / 2) CAP
			corner xSerifTerminal ySerifTerminal

glyph-block Digits-Two : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : OnumHeight OnumMarks CodeLnum CodeOnum

	define [TwoStraightNeckArcT sink offset sw top] : begin
		define smooth : [adviceGlottalStopSmooth top 1] * 0.95
		define xLeft : SB + offset
		define xRight : RightSB - offset - OX / 2
		define yPhRight : top - smooth * 1.625 - sw / 2 * (top / CAP)
		define pStraightBarStart 0.625
		return : sink
			widths.rhs sw
			g4 xLeft (top - Hook)
			hookstart (top - offset - O)
			g4.down.mid xRight (top - smooth)
			flat [mix xLeft xRight pStraightBarStart] [mix sw yPhRight pStraightBarStart]
			curl xLeft sw [widths.lhs sw]

	define [TwoArcShapeT sink offset sw top] : begin
		define smooth : [adviceGlottalStopSmooth top 1] * 0.95
		return : sink
			widths.rhs sw
			g4 (SB + offset) (top - Hook)
			hookstart (top - offset - O)
			g4.down.mid (RightSB - offset - OX / 2) (top - smooth)
			alsoThru.g2 0.5 ([StrokeWidthBlend 0.425 0.4 sw] * [linreg 500 1 700 0.95 Width]) [widths.center sw]
			flat (SB - offset) 1 [widths.heading sw 0 Downward]
			curl (SB - offset) 0 [heading Downward]

	define [TwoShape top] : glyph-proc
		include : TwoArcShapeT dispiro 0 Stroke top
		include : HBarBottom  (SB + HalfStroke) RightSB 0
		if SLAB : begin
			include : UpwardRightSerif RightSB 0 VJut

	define [TwoStraightNeckShape top] : glyph-proc
		include : TwoStraightNeckArcT dispiro 0 Stroke top
		include : HBarBottom SB RightSB 0
		if SLAB : begin
			include : UpwardRightSerif RightSB 0 VJut

	create-glyph 'two.lnum.straightNeck' : glyph-proc
		include : MarkSet.capital
		include : TwoStraightNeckShape CAP

	create-glyph 'two.onum.straightNeck' : glyph-proc
		include : OnumMarks.e
		include : TwoStraightNeckShape OnumHeight

	create-glyph 'two.lnum.curlyNeck' : glyph-proc
		include : MarkSet.capital
		include : TwoShape CAP

	create-glyph 'two.onum.curlyNeck' : glyph-proc
		include : OnumMarks.e
		include : TwoShape OnumHeight

	select-variant 'two.lnum' [CodeLnum '2'] (follow -- 'two')
	select-variant 'two.onum' [CodeOnum '2'] (follow -- 'two')
	turned 'turnDigitTwo' 0x218A 'two.lnum' Middle (CAP / 2)

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/two' 0x1D7DA : glyph-proc
		include : MarkSet.capital
		include : TwoArcShapeT dispiro 0 BBS CAP
		include : intersection
			TwoArcShapeT spiro-outline 1 BBS CAP
			VBarRight (RightSB - OX / 2 - BBD) 0 CAP BBS
		include : HBarBottom (SB + BBS / 2 * HVContrast) RightSB 0 BBS

glyph-block Digits-Three : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : OnumHeight OnumMarks ShiftDown CodeLnum CodeOnum
	glyph-block-import Letter-Latin-Ezh : EzhShape

	define [ThreeShapeT sink offset sw top] : glyph-proc
		local barcenter : top * HBarPos
		local threeRadius : ((top / 2) + HalfStroke - Smooth) * 1.25
		local fine : sw * CThin

		include : sink
			widths.rhs sw
			g4 (SB + offset - O) (top - Hook)
			hookstart (top - offset - O)
			g4 (RightSB - offset) (top - (SmoothB * (top - barcenter) / (top / 2)))
			flat (RightSB - threeRadius + 0.01) (barcenter - (fine - sw / 2)) [widths.heading 0 fine Leftward]
			curl (RightSB - threeRadius) (barcenter - (fine - sw / 2)) [heading Leftward]
		include : sink
			widths.lhs sw
			g4 (SB + offset + O) Hook
			hookstart (offset + O)
			g4 (RightSB - offset - O * 2) (SmoothA * barcenter / (top / 2))
			flat (RightSB - threeRadius + 0.01) (barcenter + (fine - sw / 2)) [widths.heading fine 0 Leftward]
			curl (RightSB - threeRadius) (barcenter + (fine - sw / 2)) [heading Leftward]

	define [ThreeShape top] : ThreeShapeT dispiro 0 Stroke top

	create-glyph 'three.lnum.twoarcs' : glyph-proc
		include : MarkSet.capital
		include : ThreeShape CAP
	create-glyph 'three.lnum.flattop' : glyph-proc
		include : MarkSet.capital
		include : EzhShape CAP 0 0.25 0.975
	create-glyph 'three.onum.twoarcs' : glyph-proc
		include : OnumMarks.p
		include : ThreeShape CAP
		include : ShiftDown
	create-glyph 'three.onum.flattop' : glyph-proc
		include : OnumMarks.p
		include : EzhShape CAP 0 0.25 0.975
		include : ShiftDown

	select-variant 'three.lnum' [CodeLnum '3'] (follow -- 'three')
	select-variant 'three.onum' [CodeOnum '3'] (follow -- 'three')

	turned 'turnDigitThree' 0x218B 'three.lnum' Middle (CAP / 2)

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/three' 0x1D7DB : glyph-proc
		include : MarkSet.capital
		include : union
			ThreeShapeT dispiro 0 BBS CAP
			intersection
				ThreeShapeT spiro-outline 1 BBS CAP
				union
					VBarRight (RightSB - BBD)         (CAP * HBarPos) CAP BBS
					VBarRight (RightSB - BBD - O * 2) 0 (CAP * HBarPos)   BBS

glyph-block Digits-Four : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : OnumMarks ShiftDown CodeLnum CodeOnum

	define [FourStdShape] : params [top open crossing [fine : AdviceStroke 3] [sw Stroke] [bbd 0]] : glyph-proc
		local yBar (top * 0.4)

		define xVertBar : [mix SB RightSB [if crossing 0.825 0.9125]] - (bbd * 0.75)
		define yVertBarTop : mix (yBar - sw) top [if open 0.5 1]
		define xHBarTerminal : if crossing RightSB xVertBar
		define xSlopeTop : xVertBar - sw * HVContrast - fine * HVContrast * [if crossing 0.25 0.5]

		include : union
			VBarRight xVertBar 0 yVertBarTop sw
			difference
				HBarTop (SB + OX) xHBarTerminal yBar sw
				Rect CAP 0 xVertBar (xVertBar + bbd)
			intersection
				if open
					Rect top yBar 0 Width
					Rect top yBar 0 xVertBar
				dispiro
					widths.rhs fine
					g4 (SB + OX) yBar
					g4 [mix (SB + OX) xSlopeTop 2] [mix yBar top 2]

		if bbd : begin
			include : VBarRight (xVertBar + bbd) 0 yVertBarTop sw
			include : HBarTop xVertBar (xVertBar + bbd) CAP sw
			include : HBarBottom xVertBar (xVertBar + bbd) 0 sw
		if (!bbd && SLAB) : begin
			include : CenterBottomSerif (xVertBar - HalfStroke * HVContrast) 0 Jut

	define [FourOpenShape top crossing] : glyph-proc
		local yBar (top * 0.4)
		local fine : AdviceStroke 3

		define xVertBar : mix SB RightSB [if crossing 0.825 0.9125]
		define xHBarTerminal : if crossing RightSB xVertBar

		include : HBarTop SB xHBarTerminal yBar
		include : VBarRight xVertBar 0 [mix (yBar - Stroke) top 0.75]
		include : VBarLeft SB yBar top
		if SLAB : begin
			include : CenterBottomSerif (xVertBar - HalfStroke * HVContrast) 0 Jut

	create-glyph 'four.lnum.closed' : glyph-proc
		include : MarkSet.capital
		include : FourStdShape CAP false true

	create-glyph 'four.lnum.closedNonCrossing' : glyph-proc
		include : MarkSet.capital
		include : FourStdShape CAP false false

	create-glyph 'four.lnum.semiOpen' : glyph-proc
		include : MarkSet.capital
		include : FourStdShape CAP true true

	create-glyph 'four.lnum.semiOpenNonCrossing' : glyph-proc
		include : MarkSet.capital
		include : FourStdShape CAP true false

	create-glyph 'four.lnum.open' : glyph-proc
		include : MarkSet.capital
		include : FourOpenShape CAP true

	create-glyph 'four.lnum.openNonCrossing' : glyph-proc
		include : MarkSet.capital
		include : FourOpenShape CAP false

	create-glyph 'four.onum.closed' : glyph-proc
		include : OnumMarks.p
		include : FourStdShape CAP false true
		include : ShiftDown

	create-glyph 'four.onum.closedNonCrossing' : glyph-proc
		include : OnumMarks.p
		include : FourStdShape CAP false false
		include : ShiftDown

	create-glyph 'four.onum.semiOpen' : glyph-proc
		include : OnumMarks.p
		include : FourStdShape CAP true true
		include : ShiftDown

	create-glyph 'four.onum.semiOpenNonCrossing' : glyph-proc
		include : OnumMarks.p
		include : FourStdShape CAP true false
		include : ShiftDown

	create-glyph 'four.onum.open' : glyph-proc
		include : OnumMarks.p
		include : FourOpenShape CAP true
		include : ShiftDown

	create-glyph 'four.onum.openNonCrossing' : glyph-proc
		include : OnumMarks.p
		include : FourOpenShape CAP false
		include : ShiftDown

	select-variant 'four.lnum' [CodeLnum '4'] (follow -- 'four')
	select-variant 'four.onum' [CodeOnum '4'] (follow -- 'four')

	glyph-block-import Letter-Blackboard : BBS BBD BBBarCenter
	create-glyph 'mathbb/four' 0x1D7DC : glyph-proc
		include : MarkSet.capital
		include : FourStdShape CAP false true (sw -- BBS) (bbd -- BBD) (fine -- BBS)


glyph-block Digits-Five : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : OnumMarks ShiftDown CodeLnum CodeOnum

	define [FiveShape] : params [top bp [sw Stroke] [bbd 0]] : glyph-proc
		local t1 : top * bp * 0.8
		local t2 : top * bp
		local ycurly : YSmoothMidR t2 0 SmoothA SmoothB
		local xleft : mix SB RightSB 0.025
		local xright : [mix RightSB SB 0.05] - (OX - O)

		include : difference
			glyph-proc
				local FiveStroke : dispiro
					widths.rhs sw
					g4 xleft (t2 - AHook * top / CAP)
					hookstart (t2 - O)
					g4 (RightSB - OX) ycurly
					hookend O
					g4 SB (Hook * top / CAP)

				local FiveStrokeMask : spiro-outline
					g4 (xleft + 1) (t2 - AHook * top / CAP)
					hookstart (t2 - O - 1)
					g4 (RightSB - OX - 1) ycurly
					hookend (O + 1)
					g4 (SB + 1) (Hook * top / CAP)

				local fiveStroke : FiveStroke.call currentGlyph
				local firstKnot : currentGlyph.gizmo.unapply fiveStroke.rhsKnots.(fiveStroke.rhsKnots.length - 1)
				include : VBarRight firstKnot.x firstKnot.y top sw
				include : HBarTop (firstKnot.x + O) xright top sw
				if bbd : begin
					include : intersection FiveStrokeMask [VBarRight (RightSB - OX - bbd) 0 CAP sw]
					include : difference [VBarRight (firstKnot.x + bbd) 0 CAP sw] FiveStrokeMask

				if (!bbd && SLAB) : include : DownwardRightSerif xright top VJut
			Rect (t2 / 2 + top * 0.015) (t2 / 2 - top * 0.015) 0 Middle

	create-glyph 'five.lnum' [CodeLnum '5'] : glyph-proc
		include : MarkSet.capital
		include : FiveShape CAP DesignParameters.fiveBarPos

	create-glyph 'five.onum' [CodeOnum '5'] : glyph-proc
		include : OnumMarks.p
		include : FiveShape CAP DesignParameters.fiveBarPos
		include : ShiftDown

	create-glyph 'zhuangToneFive' 0x1BC : glyph-proc
		include : MarkSet.capital
		include : FiveShape CAP DesignParameters.fiveBarPos

	create-glyph 'zhuangtonefive' 0x1BD : glyph-proc
		include : MarkSet.e
		include : FiveShape XH DesignParameters.fiveBarPos

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/five' 0x1D7DD : glyph-proc
		include : MarkSet.capital
		include : FiveShape CAP DesignParameters.fiveBarPos (sw -- BBS) (bbd -- BBD)

glyph-block Digits-Six : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : CodeLnum CodeOnum

	glyph-block-export OpenContourSixShape
	define [OpenContourSixShape charTop] : glyph-proc
		local oTop : charTop * 0.55 + Stroke / 2
		local ymiddlea : (oTop - SmallSmoothA + SmallSmoothB) / 2
		local ymiddleb : (oTop - SmallSmoothB + SmallSmoothA) / 2
		local fine   : Stroke * CThinB
		local coFine : Math.max [AdviceStroke 3.5] (Stroke - fine / 2)
		include : dispiro
			widths.rhs fine
			g4.left.start (Middle + CorrectionOMidS - TanSlope * (Stroke - fine)) (O + Stroke - fine)
			archv
			g4 (SB + OX + (Stroke - fine) * HVContrast) ymiddlea
			arcvh
			g4 (Middle - CorrectionOMidS) (oTop - O) [widths.rhs]
			archv
			g4.down.mid (RightSB - OX) ymiddleb
			arcvh
			g4.left.mid (Middle + CorrectionOMidS) (O)
			archv
			g4.up.mid (SB + OX) (ymiddlea + Stroke * 0.3) [widths.rhs coFine]
			quadcontrols 0 0.85
			g4 ([mix SB RightSB 0.85] - 0.25 * Stroke * HVContrast) (charTop - O) [widths.rhs]

	glyph-block-export ClosedContourNineShape
	define [ClosedContourNineShape top] : glyph-proc
		local u top
		local d : Math.min (u - SmallSmoothA - SmallSmoothB - 0.1) (top * 0.45 - HalfStroke)
		local l (SB + OX)
		local r (RightSB - OX)
		local ymiddlea : mix u d 0.5
		include : dispiro
			widths.rhs (Stroke * CThinB)
			flat (r - Stroke * (1 - CThinB) * HVContrast) ymiddlea
			curl (r - Stroke * (1 - CThinB) * HVContrast) (d + SmallSmoothA)
			arcvh
			g4   ([mix l r 0.5] + CorrectionOMidS) (d + O) [widths 0 Stroke]
			archv
			flat l (d + SmallSmoothB)
			curl l (u - SmallSmoothA)
			arcvh
			g4   ([mix l r 0.5] - CorrectionOMidS) (u - O)
			archv
			flat r ymiddlea
			curl r SmallSmoothA
			hookend O
			g4 SB Hook

	glyph-block-export StraightBarSixShape
	define [StraightBarSixShape] : params [charTop [sw Stroke] [bbd 0]] : glyph-proc
		local oTop : charTop * 0.55 + sw / 2
		local ymiddlea : (oTop - SmallSmoothA + SmallSmoothB) / 2
		local ymiddleb : (oTop - SmallSmoothB + SmallSmoothA) / 2
		local fine   : sw * CThin
		local coFine : Math.max (sw * CThin) (sw - fine / 2)

		local xMockBarStart   0
		local yMockBarStart : ymiddlea + sw * 0.3
		local xTerminal0 : [mix SB RightSB 0.6] - 0.5 * sw * HVContrast
		local kDiagBbd : DiagCorDs (charTop - yMockBarStart) (xTerminal0 - xMockBarStart) bbd
		local xTerminal : xTerminal0 + (kDiagBbd * bbd / 2)
		local pStraightBarStart : 0.75 - (sw / charTop)
		include : intersection
			Rect charTop (-charTop) (-Width) (2 * Width)
			dispiro
				widths.rhs fine
				g4.left.start (Middle + bbd / 2 + CorrectionOMidS - TanSlope * (sw - fine)) (O + sw - fine + 1/16)
				archv
				g4.up.mid (SB + bbd + OX + (sw - fine) * HVContrast + 1/16) ymiddlea
				arcvh
				g4 (Middle + bbd / 2 - CorrectionOMidS) (oTop - O) [widths.rhs sw]
				archv
				g4.down.mid (RightSB - OX) ymiddleb
				arcvh
				g4.left.mid (Middle + bbd / 2 + CorrectionOMidS) (O)
				archv
				g4.up.mid (SB + bbd + OX) (ymiddlea + sw * 0.3) [widths.rhs coFine]
				flat [mix (xMockBarStart + bbd) xTerminal pStraightBarStart] [mix yMockBarStart charTop pStraightBarStart] [widths.rhs sw]
				curl [mix (xMockBarStart + bbd) xTerminal 2]                 [mix yMockBarStart charTop 2]

		if bbd : include : HBarTop (xTerminal - kDiagBbd * bbd) xTerminal charTop sw
		if bbd : include : intersection
			Rect charTop (-charTop) (-Width) (2 * Width)
			dispiro
				g4.left.mid (Middle + bbd / 2 + CorrectionOMidS) (O) [widths.rhs sw]
				archv
				g4.up.mid (SB + OX) (ymiddlea + sw * 0.3)
				flat [mix xMockBarStart (xTerminal - kDiagBbd * bbd) pStraightBarStart] [mix yMockBarStart charTop pStraightBarStart]
				curl [mix xMockBarStart (xTerminal - kDiagBbd * bbd) 2]                 [mix yMockBarStart charTop 2]

	create-glyph 'six.lnum.openContour' : glyph-proc
		include : MarkSet.capital
		include : OpenContourSixShape CAP

	create-glyph 'six.lnum.closedContour' : glyph-proc
		include : MarkSet.capital
		include : ClosedContourNineShape CAP
		include : FlipAround (Middle) (CAP / 2)

	create-glyph 'six.lnum.straightBar' : glyph-proc
		include : MarkSet.capital
		include : StraightBarSixShape CAP

	select-variant 'six.lnum' [CodeLnum '6'] (follow -- 'six')
	alias          'six.onum' [CodeOnum '6'] 'six.lnum'

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/six' 0x1D7DE : glyph-proc
		include : MarkSet.capital
		include : StraightBarSixShape CAP (sw -- BBS) (bbd -- BBD)

glyph-block Digits-Seven : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : OnumMarks ShiftDown CodeLnum CodeOnum

	define SevenXLeft : mix SB RightSB 0.28
	define [SevenShape top] : glyph-proc
		include : union
			HBarTop SB RightSB top
			intersection
				Rect (top - Stroke) 0 SB RightSB
				dispiro
					widths.rhs
					corner RightSB (top - Stroke)
					corner [mix RightSB (SevenXLeft + 0.75 * Stroke * HVContrast) 2] [mix (top - Stroke) 0 2]

	define [SevenCrossbarShape top] : glyph-proc
		local m : mix SevenXLeft (RightSB - HalfStroke * HVContrast) 0.5
		include : HBar
			m - Stroke * HVContrast * 0.25 - LongJut * 0.8
			m + Stroke * HVContrast * 0.25 + LongJut * 0.7
			mix 0 (top - Stroke * 0.25) 0.5

	create-glyph : glyph-proc
		include : MarkSet.capital
		include : SevenShape CAP
		create-derived 'seven.lnum.noserif' : glyph-proc
		create-derived 'seven.lnum.crossbar' : glyph-proc
			include : SevenCrossbarShape CAP
		create-derived 'seven.lnum.serifed' : glyph-proc
			include : DownwardLeftSerif (SB + (OX - O)) CAP VJut
		create-derived 'seven.lnum.crossbarSerifed' : glyph-proc
			include : SevenCrossbarShape CAP
			include : DownwardLeftSerif (SB + (OX - O)) CAP VJut

	create-glyph : glyph-proc
		include : OnumMarks.p
		include : SevenShape CAP
		create-derived 'seven.onum.noserif' : glyph-proc
			include : ShiftDown
		create-derived 'seven.onum.crossbar' : glyph-proc
			include : SevenCrossbarShape CAP
			include : ShiftDown
		create-derived 'seven.onum.serifed' : glyph-proc
			include : DownwardLeftSerif (SB + (OX - O)) CAP VJut
			include : ShiftDown
		create-derived 'seven.onum.crossbarSerifed' : glyph-proc
			include : SevenCrossbarShape CAP
			include : DownwardLeftSerif (SB + (OX - O)) CAP VJut
			include : ShiftDown

	select-variant 'seven.lnum' [CodeLnum '7'] (follow -- 'seven')
	select-variant 'seven.onum' [CodeOnum '7'] (follow -- 'seven')

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/seven' 0x1D7DF : glyph-proc
		local tr : RightSB - BBS / 2
		local kDiag : DiagCorDs (CAP - BBS) (tr - SevenXLeft) (BBD * 0.75)
		local xTerm : SevenXLeft - 0.25 * kDiag * BBD
		include : union
			HBarTop SB RightSB CAP BBS
			intersection
				Rect CAP 0 0 RightSB
				union
					HBarBottom xTerm (xTerm + kDiag * BBD) 0 BBS
					ExtLineCenter 2 BBS tr         (CAP - BBS) (xTerm + kDiag * BBD) 0
					ExtLineCenter 2 BBS (tr - BBD) (CAP - BBS) xTerm                 0


glyph-block Digits-Eight : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : CodeLnum CodeOnum

	local EightPr : StrokeWidthBlend 0.85 0.925
	define [EightShape top] : begin
		local stroke : AdviceStroke2 2 3 CAP
		local p 0.96
		local l (SB + OX)
		local r (RightSB - OX)
		return : dispiro
			widths.rhs stroke
			g4.right.mid (Middle - CorrectionOMidS) (top - O)
			archv
			g4 [mix l r p] (top - [SmoothBOf (Smooth * EightPr) Width])
			alsoThru.g2 0.5 0.5 [widths.center stroke]
			g4 (l) [SmoothBOf (Smooth * EightPr) Width] [widths.lhs stroke]
			arcvh
			g4.right.mid (Middle + CorrectionOMidS) (O)
			archv
			g4 (r) [SmoothAOf (Smooth * EightPr) Width] [widths.lhs stroke]
			alsoThru.g2 0.5 0.5 [widths.center stroke]
			g4 [mix r l p] (top - [SmoothAOf (Smooth * EightPr) Width]) [widths.rhs stroke]
			arcvh
			close

	create-glyph 'eight.lnum.crossing' : glyph-proc
		include : MarkSet.capital
		include : EightShape CAP

	define [EightCirclesShape stroke top] : begin
		local pShrink 1.00
		local pSizeDiffY : StrokeWidthBlend 0.95 0.94
		local pSizeDiffX : StrokeWidthBlend 0.95 0.96

		local yMid : top / (1 + pSizeDiffY)
		local sma : SmoothAOf (Smooth * 0.9) Width
		local smb : SmoothBOf (Smooth * 0.9) Width
		local smaTop : SmoothAOf (Smooth * 0.9 * pSizeDiffY) Width
		local smbTop : SmoothBOf (Smooth * 0.9 * pSizeDiffY) Width

		local botLeft  : mix SB RightSB (1 - pShrink)
		local botRight : mix SB RightSB pShrink
		local topLeft  : mix SB RightSB (1 - pShrink * pSizeDiffX)
		local topRight : mix SB RightSB (pShrink * pSizeDiffX)

		local fine : stroke * CThin
		local mc : CorrectionOMidX * stroke
		local coFine : stroke / 2 - (stroke - fine)
		local spT : StrokeWidthBlend 2.08 2.20
		local spB : StrokeWidthBlend 2.18 2.20

		return : union
			dispiro
				widths.rhs stroke
				g4 (Middle - mc) (top - O)
				archv.superness spB
				g4 (topRight - OX) [YSmoothMidR (top - O) (yMid - coFine) smaTop smbTop]
				arcvh.superness spT
				g4 (Middle + mc) (yMid - coFine) [widths.rhs fine]
				archv.superness spT
				g4 (topLeft + OX) [YSmoothMidL (top - O) (yMid - coFine) smaTop smbTop] [widths.rhs stroke]
				arcvh.superness spB
				close
			dispiro
				widths.rhs stroke
				g4 (Middle + mc) O
				archv.superness spB
				g4 (botLeft + OX) [YSmoothMidL (yMid + coFine) O sma smb]
				arcvh.superness spT
				g4 (Middle - mc) (yMid + coFine) [widths.rhs fine]
				archv.superness spT
				g4 (botRight - OX) [YSmoothMidR (yMid + coFine) O sma smb] [widths.rhs stroke]
				arcvh.superness spB
				close


	create-glyph 'eight.lnum.twoCircles' : glyph-proc
		include : MarkSet.capital
		include : EightCirclesShape [AdviceStroke2 2 3 CAP] CAP

	select-variant 'eight.lnum' [CodeLnum '8'] (follow -- 'eight')
	alias 'eight.onum' [CodeOnum '8'] 'eight.lnum'

	# There is an "eight without lower contour" shape used for /propto
	create-glyph 'rotetedpropto' : glyph-proc # rotetedpropto
		local p 0.96
		local py 0.4
		local l (SB + OX)
		local r (RightSB - OX)
		include : dispiro
			widths.lhs
			straight.up.start r 0 [heading Upward]
			alsoThru 0.5 (1 - py) [widths (Stroke * py) (Stroke * (1 - py))]
			g4 [mix r l p] (CAP - SmoothA * p * EightPr) [widths.rhs]
			arcvh
			g4 (Middle - CorrectionOMidS) (CAP - O)
			archv
			g4 [mix l r p] (CAP - SmoothB * p * EightPr)
			alsoThru 0.5 py [widths (Stroke * py) (Stroke * (1 - py))]
			straight.down.end l 0 [widths.heading Stroke 0 Downward]

	glyph-block-import Letter-Blackboard : BBS BBD

	define [BBEightSd] : params [top swStart swEnd kTop sign OffsetLT OffsetRB OffsetC] : begin
		define stroke : Math.max swStart swEnd
		define fine   : Math.min swStart swEnd
		define soStart : stroke - swStart
		define soEnd   : stroke - swEnd
		define bbOvershoot : BBD / 8
		define xLeftTop  : [mix SB RightSB (1 - kTop)] - bbOvershoot
		define xRightTop : mix SB RightSB kTop
		define xLeftBot  : SB + OX
		define xRightBot : RightSB - OX + bbOvershoot
		define sma : SmoothAOf (Smooth * EightPr) Width
		define smb : SmoothBOf (Smooth * EightPr) Width

		define NcCenterX   : mix xLeftTop     xRightBot   0.5
		define NcCenterY   : mix (top - sma)  (sma)       0.5

		define [Center s] : object
			x : mix (xLeftTop + [OffsetLT s].x) (xRightBot - [OffsetRB s].x) 0.5
			y : mix (top - sma)                 (sma)                        0.5

		return : dispiro
			g2   ([Center 1].x + [OffsetC 1].x) ([Center 1].y + [OffsetC 1].y) [widths.center stroke]
			g4   (xRightTop - HVContrast * soStart) (top - smb) [widths.lhs fine]
			arcvh
			g4   (Middle - CorrectionOMidX * stroke - bbOvershoot / 2) (top - O - soStart)
			archv
			g4   (xLeftTop + [OffsetLT sign].x) (top - sma + [OffsetLT sign].y)
			g2   ([Center sign].x + [OffsetC sign].x) ([Center sign].y + [OffsetC sign].y) [widths.center stroke]
			g4   (xRightBot - [OffsetRB sign].x) (sma + [OffsetRB sign].y) [widths.rhs fine]
			arcvh
			g4   (Middle + CorrectionOMidX * stroke + bbOvershoot / 2) (O + soEnd)
			archv
			g4   (xLeftBot + HVContrast * soEnd) smb [widths.rhs fine]
			g2   ([Center (-1)].x + [OffsetC (-1)].x) ([Center (-1)].y + [OffsetC (-1)].y) [widths.center stroke]

	create-glyph 'mathbb/eight' 0x1D7E0 : glyph-proc
		include : MarkSet.capital
		define theta : Math.PI / 4
		foreach sign [items-of { 1 (-1) }] : begin
			include : BBEightSd
				top     -- CAP
				swStart -- BBS * [if (sign > 0) CThin 1]
				swEnd   -- BBS * [if (sign < 0) CThin 1]
				kTop    -- 0.96
				ess     -- BBD
				sign    -- sign
				OffsetC -- [lambda [s] {
					.x (0.5 * s * BBD * [Math.sin theta])
					.y (0.5 * s * BBD * [Math.cos theta])
				}]
				OffsetLT -- [lambda [s] {
					.x [if (s > 0) (BBD / 2) 0]
					.y ([if (s > 0) 0.25 0.375] * s * BBD * [Math.cos theta])
				}]
				OffsetRB -- [lambda [s] {
					.x [if (s < 0) (BBD / 2) 0]
					.y ([if (s < 0) 0.25 0.375] * s * BBD * [Math.cos theta])
				}]


glyph-block Digits-Nine : begin
	glyph-block-import CommonShapes
	glyph-block-import Common-Derivatives
	glyph-block-import Digits-Shared : OnumHeight OnumMarks ShiftDown CodeLnum CodeOnum
	glyph-block-import Digits-Six : ClosedContourNineShape OpenContourSixShape StraightBarSixShape

	create-glyph 'nine.lnum.closedContour' : glyph-proc
		include : MarkSet.capital
		include : ClosedContourNineShape CAP

	create-glyph 'nine.onum.closedContour' : glyph-proc
		include : OnumMarks.p
		include : ClosedContourNineShape CAP
		include : ShiftDown

	create-glyph 'nine.lnum.openContour' : glyph-proc
		include : MarkSet.capital
		include : OpenContourSixShape CAP
		include : FlipAround (Middle) (CAP / 2)

	create-glyph 'nine.onum.openContour' : glyph-proc
		include : OnumMarks.p
		include : OpenContourSixShape CAP
		include : FlipAround (Middle) (OnumHeight / 2)

	create-glyph 'nine.lnum.straightBar' : glyph-proc
		include : MarkSet.capital
		include : StraightBarSixShape CAP
		include : FlipAround (Middle) (CAP / 2)

	create-glyph 'nine.onum.straightBar' : glyph-proc
		include : OnumMarks.p
		include : StraightBarSixShape CAP
		include : FlipAround (Middle) (OnumHeight / 2)

	select-variant 'nine.lnum' [CodeLnum '9'] (follow -- 'nine')
	select-variant 'nine.onum' [CodeOnum '9'] (follow -- 'nine')

	glyph-block-import Letter-Blackboard : BBS BBD
	create-glyph 'mathbb/nine' 0x1D7E1 : glyph-proc
		include : MarkSet.capital
		include : StraightBarSixShape CAP (sw -- BBS) (bbd -- BBD)
		include : FlipAround (Middle) (CAP / 2)
